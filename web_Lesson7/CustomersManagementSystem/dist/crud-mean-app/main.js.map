{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/angular-material/angular-material.module.ts","webpack:///./src/app/api.service.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/customer-add/customer-add.component.css","webpack:///./src/app/customer-add/customer-add.component.html","webpack:///./src/app/customer-add/customer-add.component.ts","webpack:///./src/app/customer-detail/customer-detail.component.css","webpack:///./src/app/customer-detail/customer-detail.component.html","webpack:///./src/app/customer-detail/customer-detail.component.ts","webpack:///./src/app/customer-edit/customer-edit.component.css","webpack:///./src/app/customer-edit/customer-edit.component.html","webpack:///./src/app/customer-edit/customer-edit.component.ts","webpack:///./src/app/customer/customer.component.css","webpack:///./src/app/customer/customer.component.html","webpack:///./src/app/customer/customer.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {\n  MatInputModule,\n  MatPaginatorModule,\n  MatProgressSpinnerModule,\n  MatSortModule,\n  MatTableModule,\n  MatIconModule,\n  MatButtonModule,\n  MatCardModule,\n  MatFormFieldModule\n} from '@angular/material';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatProgressSpinnerModule,\n    MatIconModule,\n    MatButtonModule,\n    MatCardModule,\n    MatFormFieldModule\n  ],\n  exports: [\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatProgressSpinnerModule,\n    MatIconModule,\n    MatButtonModule,\n    MatCardModule,\n    MatFormFieldModule\n  ],\n  declarations: []\n})\nexport class AngularMaterialModule {\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, of, throwError} from 'rxjs';\nimport {HttpClient, HttpHeaders, HttpErrorResponse} from '@angular/common/http';\nimport {catchError, map} from 'rxjs/operators';\n\nconst httpOptions = {\n  headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\nconst apiUrl = '/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // return an observable with a user-facing error message\n    return throwError('Something bad happened; please try again later.');\n  };\n\n  private extractData(res: Response) {\n    let body = res;\n    return body || {};\n  }\n\n  getCustomers(): Observable<any> {\n    return this.http.get(apiUrl, httpOptions).pipe(\n      map(this.extractData),\n      catchError(this.handleError));\n  }\n\n  getCustomer(id: string): Observable<any> {\n    const url = `${apiUrl}/${id}`;\n    return this.http.get(url, httpOptions).pipe(\n      map(this.extractData),\n      catchError(this.handleError));\n  }\n\n  postCustomer(data): Observable<any> {\n    return this.http.post(apiUrl, data, httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  updateCustomer(id: string, data): Observable<any> {\n    const url = `${apiUrl}/${id}`;\n    return this.http.put(url, data, httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  deleteCustomer(id: string): Observable<{}> {\n    const url = `${apiUrl}/${id}`;\n\tconsole.log(url);\n    return this.http.delete(url, httpOptions)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {CustomerComponent} from './customer/customer.component';\nimport {CustomerDetailComponent} from './customer-detail/customer-detail.component';\nimport {CustomerAddComponent} from './customer-add/customer-add.component';\nimport {CustomerEditComponent} from './customer-edit/customer-edit.component';\n\nconst appRoutes: Routes = [\n  {\n    path: 'customers',\n    component: CustomerComponent,\n    data: {title: 'Customers List'}\n  },\n  {\n    path: 'customer-details/:id',\n    component: CustomerDetailComponent,\n    data: {title: 'Customer Details'}\n  },\n  {\n    path: 'customer-add',\n    component: CustomerAddComponent,\n    data: {title: 'Add Customer'}\n  },\n  {\n    path: 'customer-edit/:id',\n    component: CustomerEditComponent,\n    data: {title: 'Edit Book'}\n  },\n  {\n    path: '',\n    redirectTo: '/customers',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forRoot(appRoutes, {useHash: true}),\n  ],\n  exports: [\n    RouterModule\n  ],\n  declarations: []\n})\nexport class AppRoutingModule {\n}\n","module.exports = \"\"","module.exports = \"<header class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\n  <a center class=\\\"navbar-brand\\\" href=\\\"#\\\">Customer CRUD operations</a>\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\"\\n          aria-controls=\\\"navbarSupportedContent\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n</header>\\n<div class=\\\"container\\\">\\n  <router-outlet></router-outlet>\\n</div>\\n\"","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {HttpClientModule} from '@angular/common/http';\nimport {BsDatepickerModule} from 'ngx-bootstrap/datepicker';\n\nimport {AppComponent} from './app.component';\nimport {CustomerComponent} from './customer/customer.component';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AngularMaterialModule} from './angular-material/angular-material.module';\nimport {CustomerDetailComponent} from './customer-detail/customer-detail.component';\nimport {CustomerAddComponent} from './customer-add/customer-add.component';\nimport {CustomerEditComponent} from './customer-edit/customer-edit.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CustomerComponent,\n    CustomerDetailComponent,\n    CustomerAddComponent,\n    CustomerEditComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    AngularMaterialModule,\n    BsDatepickerModule.forRoot()\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","module.exports = \".example-form {\\n    min-width: 150px;\\n    max-width: 500px;\\n    width: 100%;\\n}\\n\\n.example-full-width {\\n    width: 100%;\\n}\\n\\n.example-full-width:nth-last-child() {\\n    margin-bottom: 10px;\\n}\\n\\n.button-row {\\n    margin: 10px 0;\\n}\"","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-6 col-md-offset-3\\\">\\n    <form [formGroup]=\\\"customerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n      <div class=\\\"form-group\\\">\\n        <label class=\\\"control-label\\\">First Name</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"firstName\\\" \\n          [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label class=\\\"control-label\\\">Last Name</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"lastName\\\" \\n          [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label class=\\\"control-label\\\">Gender</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"gender\\\" \\n          [ngClass]=\\\"{ 'is-invalid': submitted && f.gender.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.gender.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.gender.errors.required\\\">Gender is required</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label class=\\\"control-label\\\">Birthday</label>\\n        <input type=\\\"text\\\"\\n          formControlName=\\\"birthday\\\"\\n          class=\\\"form-control\\\"\\n          [ngClass]=\\\"{ 'is-invalid': submitted && f.birthday.errors }\\\"\\n          bsDatepicker>\\n        <div *ngIf=\\\"submitted && f.birthday.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.birthday.errors.required\\\">Birthday is required</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label class=\\\"control-label\\\">Last contact date</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"lastContact\\\" \\n          [ngClass]=\\\"{ 'is-invalid': submitted && f.lastContact.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.lastContact.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.lastContact.errors.required\\\">Last contacted date is required</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label class=\\\"control-label\\\">Customer life time</label>\\n        <input type=\\\"number\\\" class=\\\"form-control\\\" formControlName=\\\"customerLifetimeValue\\\" \\n          [ngClass]=\\\"{ 'is-invalid': submitted && f.customerLifetimeValue.errors }\\\">\\n        <div *ngIf=\\\"submitted && f.customerLifetimeValue.errors\\\" class=\\\"invalid-feedback\\\">\\n            <div *ngIf=\\\"f.customerLifetimeValue.errors.required\\\">Life time value is required</div>\\n        </div>\\n      </div>\\n      <button class=\\\"btn btn-default\\\" type=\\\"button\\\" (click)=\\\"onReset()\\\">Reset</button>\\n      <button class=\\\"btn btn-primary pull-right\\\" type=\\\"submit\\\">Submit</button>\\n    </form>\\n  </div>\\n</div>\\n\\n\\n\\n\\n\\n<!-- <div class=\\\"button-row\\\">\\n  <a mat-raised-button color=\\\"primary\\\" [routerLink]=\\\"['/customers']\\\"><mat-icon>list</mat-icon></a>\\n</div>\\n<form [formGroup]=\\\"customerForm\\\" (ngSubmit)=\\\"onFormSubmit(customerForm.value)\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"First Name\\\" formControlName=\\\"name.first\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('name.first').valid && customerForm.get('name.first').touched\\\">Please enter first name</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Last Name\\\" formControlName=\\\"name.last\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('name.last').valid && customerForm.get('name.last').touched\\\">Please enter last name</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Birthday\\\" formControlName=\\\"birthday\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('birthday').valid && customerForm.get('birthday').touched\\\">Please enter DOB</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <textarea matInput placeholder=\\\"Gender\\\" formControlName=\\\"gender\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"></textarea>\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('gender').valid && customerForm.get('gender').touched\\\">Please enter gender</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Last Contact\\\" formControlName=\\\"lastContact\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('lastContact').valid && customerForm.get('lastContact').touched\\\">Please enter last contact date</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Life Time\\\" formControlName=\\\"customerLifetimeValue\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('customerLifetimeValue').valid && customerForm.get('customerLifetimeValue').touched\\\">Please enter customer life time</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <div class=\\\"button-row\\\">\\n    <button type=\\\"submit\\\" [disabled]=\\\"!customerForm.valid\\\" mat-raised-button color=\\\"primary\\\"><mat-icon>save</mat-icon></button>\\n  </div>\\n</form> -->\"","import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\nimport {ApiService} from '../api.service';\n\n@Component({\n  selector: 'app-customer-add',\n  templateUrl: './customer-add.component.html',\n  styleUrls: ['./customer-add.component.css']\n})\nexport class CustomerAddComponent implements OnInit {\n\n  customerForm: FormGroup;\n  submitted = false;\n\n  constructor(private router: Router, private api: ApiService, private formBuilder: FormBuilder) {\n  }\n\n  ngOnInit() {\n    this.customerForm = this.formBuilder.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      gender: ['', Validators.required],\n      birthday: ['', Validators.required],\n      lastContact: ['', Validators.required],\n      customerLifetimeValue: ['', Validators.required],\n    });\n  }\n\n  // getter for form fields\n  get f() {\n    return this.customerForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.customerForm.invalid) {\n      return;\n    }\n    let customer: object = {};\n    customer['customerID'] = 15;\n    customer['name'] = {\n      first: this.customerForm.value.firstName,\n      last: this.customerForm.value.lastName\n    };\n    customer['gender'] = this.customerForm.value.gender;\n    customer['birthday'] = this.customerForm.value.birthday;\n    customer['lastContact'] = this.customerForm.value.lastContact;\n    customer['customerLifetimeValue'] = this.customerForm.value.customerLifetimeValue;\n    console.log(customer);\n\n    this.api.postCustomer(customer)\n      .subscribe(res => {\n        let id = res['_id'];\n        this.router.navigate(['/customer-details', id]);\n      }, (err) => {\n        console.log(err);\n      });\n  }\n\n  onReset() {\n    this.submitted = false;\n    this.customerForm.reset();\n  }\n\n}\n","module.exports = \".user-name {\\n    padding-top: 10px; \\n}\\n\\n.customer-detail-container {\\n    padding-top: 20px; \\n}\\n\\n.list-all {\\n    padding: 10px 0;\\n}\\n\\n.icon-svg {\\n    height: 1rem;\\n    width: 1rem;\\n}\\n\\n.btn {\\n    width: 60px;\\n    margin-right: 20px; \\n}\\n\\n.icon-trash {\\n    fill: #dc3545;\\n}\\n\\n.icon-pencil, .icon-list {\\n    fill: #007bff;\\n}\\n\\n.icon-list {\\n    vertical-align: middle;\\n}\\n\\n.btn:hover .icon-trash, .btn:hover .icon-pencil, .btn:hover .icon-list {\\n    fill: #fff;\\n}\"","module.exports = \"<div class=\\\"container customer-detail-container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-8 offset-lg-2 col-sm-12 offset-sm-0\\\">\\n      <div class=\\\"list-all\\\">\\n        <a href=\\\"#\\\" class=\\\"btn btn-outline-primary\\\" [routerLink]=\\\"['/customers']\\\">\\n          <svg class=\\\"icon-svg icon-list\\\">\\n            <use xlink:href=\\\"assets/iconic/sprite.min.svg#list\\\" class=\\\"icon-list\\\"></use>\\n          </svg>\\n        </a>\\n        <span class=\\\"btn-outline-primary\\\">List all customers</span>\\n      </div>\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header text-center\\\">\\n          <img  *ngIf=\\\"customer.gender === 'm'; else femaleAvatar\\\" class=\\\"avatar\\\" src=\\\"assets/male-avatar.svg\\\"/>\\n          <ng-template #femaleAvatar>\\n            <img class=\\\"avatar\\\" src=\\\"assets/female-avatar.svg\\\"/>\\n          </ng-template>\\n          <h5 class=\\\"user-name\\\">{{customer.name?.first}} {{customer.name?.last}}</h5>\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-6\\\">\\n              <div class=\\\"card-text\\\"><small class=\\\"text-muted\\\">Birthday</small></div>\\n              <p>{{customer.birthday | date}}</p>\\n              <div class=\\\"card-text\\\"><small class=\\\"text-muted\\\">Life Time Value</small></div>\\n              <p>{{customer.customerLifetimeValue}}</p>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n              <div class=\\\"card-text\\\"><small class=\\\"text-muted\\\">Last Contacted Date</small></div>\\n              <p>{{customer.lastContact | date}}</p>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"card-footer bg-transparent\\\">\\n          <a href=\\\"#\\\" class=\\\"btn btn-outline-primary\\\" [routerLink]=\\\"['/customer-edit', customer._id]\\\">\\n            <svg class=\\\"icon-svg icon-pencil\\\">\\n              <use xlink:href=\\\"assets/iconic/sprite.min.svg#pencil\\\" class=\\\"icon-pencil\\\"></use>\\n            </svg>\\n          </a>\\n          <a href=\\\"#\\\" class=\\\"btn btn-outline-danger\\\" (click)=\\\"deleteCustomer(customer._id)\\\">\\n            <svg class=\\\"icon-svg icon-trash\\\">\\n              <use xlink:href=\\\"assets/iconic/sprite.min.svg#trash\\\" class=\\\"icon-trash\\\"></use>\\n            </svg>\\n          </a>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {ApiService} from '../api.service';\n\n@Component({\n  selector: 'app-customer-detail',\n  templateUrl: './customer-detail.component.html',\n  styleUrls: ['./customer-detail.component.css']\n})\nexport class CustomerDetailComponent implements OnInit {\n\n  customer = {};\n\n  constructor(private route: ActivatedRoute, private api: ApiService, private router: Router) {\n  }\n\n  ngOnInit() {\n    this.getCustomerDetails(this.route.snapshot.params['id']);\n\n  }\n\n  getCustomerDetails(id) {\n    this.api.getCustomer(id)\n      .subscribe(data => {\n        console.log(data);\n        this.customer = data;\n      });\n  }\n\n  deleteCustomer(id) {\n    this.api.deleteCustomer(id)\n      .subscribe(res => {\n          this.router.navigate(['/customers']);\n        }, (err) => {\n          console.log(err);\n        }\n      );\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<!-- write code to edit and save customer in this component -->\\n<div class=\\\"row\\\">\\n    <div class=\\\"col-md-6 col-md-offset-3\\\">\\n        <form [formGroup]=\\\"customerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\">First Name</label>\\n                <input type=\\\"text\\\" id=\\\"firstName\\\" class=\\\"form-control\\\" formControlName=\\\"firstName\\\" value = {{customer.name?.first}}\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors }\\\">\\n                <div *ngIf=\\\"submitted && f.firstName.errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f.firstName.errors.required\\\">First Name is required</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\">Last Name</label>\\n                <input type=\\\"text\\\" id=\\\"lastName\\\" class=\\\"form-control\\\" formControlName=\\\"lastName\\\" value = {{customer.name?.last}}\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors }\\\">\\n                <div *ngIf=\\\"submitted && f.lastName.errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f.lastName.errors.required\\\">Last Name is required</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\">Gender</label>\\n                <input type=\\\"text\\\" id=\\\"gender\\\" class=\\\"form-control\\\" formControlName=\\\"gender\\\" value = {{customer.gender}}\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && f.gender.errors }\\\">\\n                <div *ngIf=\\\"submitted && f.gender.errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f.gender.errors.required\\\">Gender is required</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\">Birthday</label>\\n                <input type=\\\"text\\\" id=\\\"birthday\\\"\\n                       formControlName=\\\"birthday\\\" value = {{customer.birthday}}\\n                       class=\\\"form-control\\\"\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && f.birthday.errors }\\\"\\n                       bsDatepicker>\\n                <div *ngIf=\\\"submitted && f.birthday.errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f.birthday.errors.required\\\">Birthday is required</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\">Last contact date</label>\\n                <input type=\\\"text\\\" id=\\\"lastContact\\\" class=\\\"form-control\\\" formControlName=\\\"lastContact\\\" value = {{customer.lastContact}}\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && f.lastContact.errors }\\\">\\n                <div *ngIf=\\\"submitted && f.lastContact.errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f.lastContact.errors.required\\\">Last contacted date is required</div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\">Customer life time</label>\\n                <input type=\\\"number\\\"  id=\\\"customerLifetimeValue\\\" class=\\\"form-control\\\" formControlName=\\\"customerLifetimeValue\\\" value = {{customer.customerLifetimeValue}}\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && f.customerLifetimeValue.errors }\\\">\\n                <div *ngIf=\\\"submitted && f.customerLifetimeValue.errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f.customerLifetimeValue.errors.required\\\">Life time value is required</div>\\n                </div>\\n            </div>\\n            <button class=\\\"btn btn-default\\\" type=\\\"button\\\" (click)=\\\"onReset()\\\">Reset</button>\\n            <button class=\\\"btn btn-primary pull-right\\\" type=\\\"submit\\\">Submit</button>\\n        </form>\\n    </div>\\n</div>\\n\\n\\n\\n\\n\\n<!-- <div class=\\\"button-row\\\">\\n  <a mat-raised-button color=\\\"primary\\\" [routerLink]=\\\"['/customers']\\\"><mat-icon>list</mat-icon></a>\\n</div>\\n<form [formGroup]=\\\"customerForm\\\" (ngSubmit)=\\\"onFormSubmit(customerForm.value)\\\">\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"First Name\\\" formControlName=\\\"name.first\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('name.first').valid && customerForm.get('name.first').touched\\\">Please enter first name</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Last Name\\\" formControlName=\\\"name.last\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('name.last').valid && customerForm.get('name.last').touched\\\">Please enter last name</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Birthday\\\" formControlName=\\\"birthday\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('birthday').valid && customerForm.get('birthday').touched\\\">Please enter DOB</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <textarea matInput placeholder=\\\"Gender\\\" formControlName=\\\"gender\\\"\\n           [errorStateMatcher]=\\\"matcher\\\"></textarea>\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('gender').valid && customerForm.get('gender').touched\\\">Please enter gender</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Last Contact\\\" formControlName=\\\"lastContact\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('lastContact').valid && customerForm.get('lastContact').touched\\\">Please enter last contact date</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <mat-form-field class=\\\"example-full-width\\\">\\n    <input matInput placeholder=\\\"Life Time\\\" formControlName=\\\"customerLifetimeValue\\\"\\n           [errorStateMatcher]=\\\"matcher\\\">\\n    <mat-error>\\n      <span *ngIf=\\\"!customerForm.get('customerLifetimeValue').valid && customerForm.get('customerLifetimeValue').touched\\\">Please enter customer life time</span>\\n    </mat-error>\\n  </mat-form-field>\\n  <div class=\\\"button-row\\\">\\n    <button type=\\\"submit\\\" [disabled]=\\\"!customerForm.valid\\\" mat-raised-button color=\\\"primary\\\"><mat-icon>save</mat-icon></button>\\n  </div>\\n</form> -->\"","import {Component, OnInit} from '@angular/core';\nimport {Router, ActivatedRoute} from '@angular/router';\nimport {FormControl, FormGroupDirective, FormBuilder, FormGroup, NgForm, Validators} from '@angular/forms';\n\nimport {ApiService} from '../api.service';\n\n@Component({\n  selector: 'app-customer-edit',\n  templateUrl: './customer-edit.component.html',\n  styleUrls: ['./customer-edit.component.css']\n})\nexport class CustomerEditComponent implements OnInit {\n   customer = {};\n  customerForm: FormGroup;\n  id = '';\n  name: object = {\n    first: <string>'',\n    last: <string>''\n  };\n  gender = '';\n  birthday = '';\n  lastContact = '';\n  customerLifetimeValue = '';\n\n  constructor(private router: Router, private route: ActivatedRoute, private api: ApiService, private formBuilder: FormBuilder) {\n  }\n\n  ngOnInit() {\n\t  this.customerForm = this.formBuilder.group({\n      'firstName': [null, Validators.required],\n      'lastName': [null, Validators.required],\n      'gender': [null, Validators.required],\n      'birthday': [null, Validators.required],\n      'lastContact': [null, Validators.required],\n      'customerLifetimeValue': [null, Validators.required]\n    });\n    this.getCustomer(this.route.snapshot.params['id']);\n  }\n\n\n    /*** Get the Customer Details*/\n    getCustomer(id) {\n      this.api.getCustomer(id)\n          .subscribe(data => {\n            console.log(data);\n            this.customer = data;\n          });\n    }\n\n  onSubmit() {\n    /*** On form submit update the customer details*/\n\t//let customer: object = {};\n\tconsole.log(document.getElementById('firstName'));\n\tif(document.getElementById('firstName').classList.contains('ng-dirty'))\n\t\tthis.customer['name']['first']=this.customerForm.value.firstName;\n\tif(document.getElementById('lastName').classList.contains('ng-dirty'))\n\t\tthis.customer['name']['last']=this.customerForm.value.lastName;\n    /*this.customer['name'] = {\n      first: this.customerForm.value.firstName,\n      last: this.customerForm.value.lastName\n    };*/\n\tif(document.getElementById('gender').classList.contains('ng-dirty'))\n    this.customer['gender'] = this.customerForm.value.gender;\n    if(document.getElementById('birthday').classList.contains('ng-dirty'))\n    this.customer['birthday'] = this.customerForm.value.birthday;\n\tif(document.getElementById('lastContact').classList.contains('ng-dirty'))\n    this.customer['lastContact'] = this.customerForm.value.lastContact;\n    if(document.getElementById('customerLifetimeValue').classList.contains('ng-dirty'))\n    this.customer['customerLifetimeValue'] = this.customerForm.value.customerLifetimeValue;\n\tthis.api.updateCustomer(this.route.snapshot.params['id'], this.customer)\n      .subscribe(res => {\n\t\t  \n        this.router.navigate(['/customer-details', this.route.snapshot.params['id']]);\n      }, (err) => {\n        console.log('test err')\n        console.log(err);\n      });\n  }\n}\n","module.exports = \".col-padding {\\n    padding: 20px;\\n}\\n\\n.card-body {\\n    display: flex;\\n    align-items: center;\\n    cursor: pointer;\\n}\\n\\n.avatar {\\n    height: 4rem;\\n    width: 4rem;\\n    flex: 2;\\n}\\n\\n.customer-name {\\n    padding: 0 10px;\\n    flex: 3;\\n}\\n\\n.icon-plus {\\n    fill: #007bff;\\n    height: 1rem;\\n    text-align: center;\\n\\n}\\n\\n.add-customer.card {\\n    border: 1px dashed #007bff;\\n}\\n\\n.dotted-circle {\\n    border: 1px dashed #007bff;\\n    border-radius: 50%;\\n    height: 4rem;\\n    width: 4rem;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.add-customer-label {\\n    padding: 0 10px;\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-padding col-lg-3 col-md-4 col-sm-6\\\">\\n      <div class=\\\"card add-customer\\\">\\n        <div class=\\\"card-body\\\">\\n          <div class=\\\"dotted-circle\\\">\\n            <svg class=\\\"icon-plus\\\">\\n              <use xlink:href=\\\"assets/iconic/sprite.min.svg#plus\\\" class=\\\"icon-plus\\\"></use>\\n            </svg>\\n          </div>\\n          <span class=\\\"add-customer-label\\\"><a href=\\\"#/customer-add\\\">Add customer</a></span>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"col-padding col-lg-3 col-md-4 col-sm-6\\\" *ngFor=\\\"let customer of customers\\\">\\n      <div class=\\\"card\\\" [routerLink]=\\\"['/customer-details/', customer._id]\\\">\\n        <div class=\\\"card-body\\\">\\n          <img *ngIf=\\\"customer.gender === 'm'; else femaleAvatar\\\" class=\\\"avatar\\\" src=\\\"assets/male-avatar.svg\\\"/>\\n          <ng-template #femaleAvatar>\\n            <img class=\\\"avatar\\\" src=\\\"assets/female-avatar.svg\\\"/>\\n          </ng-template>\\n          <span class=\\\"customer-name\\\">{{customer.name.first}} {{customer.name.last}}</span>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import {Component, OnInit} from '@angular/core';\n\nimport {ApiService} from '../api.service';\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n})\nexport class CustomerComponent implements OnInit {\n\n  customers: any;\n\n  constructor(private api: ApiService) {\n  }\n\n  ngOnInit() {\n    this.api.getCustomers()\n      .subscribe(res => {\n        console.log(res);\n        this.customers = res;\n      }, err => {\n        console.log(err);\n      });\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}